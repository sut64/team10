[{"c:\\borrow2\\frontend\\src\\index.tsx":"1","c:\\borrow2\\frontend\\src\\reportWebVitals.ts":"2","c:\\borrow2\\frontend\\src\\App.tsx":"3","c:\\borrow2\\frontend\\src\\components\\Home.tsx":"4","c:\\borrow2\\frontend\\src\\components\\CreateBorrow.tsx":"5","c:\\borrow2\\frontend\\src\\components\\Borrow.tsx":"6","c:\\personnel\\frontend\\src\\index.tsx":"7","c:\\personnel\\frontend\\src\\reportWebVitals.ts":"8","c:\\personnel\\frontend\\src\\App.tsx":"9","c:\\personnel\\frontend\\src\\components\\Home.tsx":"10","c:\\personnel\\frontend\\src\\components\\Personnel.tsx":"11","c:\\personnel\\frontend\\src\\components\\CreatePersonnel.tsx":"12"},{"size":500,"mtime":1635955159064,"results":"13","hashOfConfig":"14"},{"size":425,"mtime":1635955157676,"results":"15","hashOfConfig":"14"},{"size":5712,"mtime":1636018943880,"results":"16","hashOfConfig":"14"},{"size":2355,"mtime":1635253033628,"results":"17","hashOfConfig":"14"},{"size":10846,"mtime":1636034701473,"results":"18","hashOfConfig":"14"},{"size":4381,"mtime":1636033064714,"results":"19","hashOfConfig":"14"},{"size":500,"mtime":1635955159064,"results":"20","hashOfConfig":"21"},{"size":425,"mtime":1635955157676,"results":"22","hashOfConfig":"21"},{"size":5781,"mtime":1643318641655,"results":"23","hashOfConfig":"21"},{"size":1335,"mtime":1643318552556,"results":"24","hashOfConfig":"21"},{"size":4484,"mtime":1643318591652,"results":"25","hashOfConfig":"21"},{"size":13564,"mtime":1643317646861,"results":"26","hashOfConfig":"21"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"15825hq",{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"m4uiyc",{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"44"},"c:\\borrow2\\frontend\\src\\index.tsx",[],["56","57"],"c:\\borrow2\\frontend\\src\\reportWebVitals.ts",[],"c:\\borrow2\\frontend\\src\\App.tsx",[],"c:\\borrow2\\frontend\\src\\components\\Home.tsx",[],"c:\\borrow2\\frontend\\src\\components\\CreateBorrow.tsx",["58","59","60","61","62"],"import { useEffect, useState } from \"react\";\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\nimport {\r\n  makeStyles,\r\n  Theme,\r\n  createStyles,\r\n  alpha,\r\n} from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MuiAlert, { AlertProps } from \"@material-ui/lab/Alert\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { BookInterface } from \"../models/IBook\";\r\nimport { BorrowInterface } from \"../models/IBorrow\";\r\nimport { BtypeInterface } from \"../models/IBtype\";\r\nimport { MemberInterface } from \"../models/IMember\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDateTimePicker,\r\n} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\n\r\nconst Alert = (props: AlertProps) => {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n};\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    container: {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      color: theme.palette.text.secondary,\r\n    },\r\n  })\r\n);\r\n\r\nfunction CreateBorrow() {\r\n  const classes = useStyles();\r\n  const [selectedDate, setSelectedDate] = useState<Date | null>(new Date());\r\n  const [due, setDue] = useState<Date | null>(new Date());\r\n  const [members, setMember] = useState<MemberInterface[]>([]);\r\n  const [books, setBook] = useState<BookInterface[]>([]);\r\n  const [btypes, setBtype] = useState<BtypeInterface[]>([]);\r\n  const [borrows, setBorrow] = useState<Partial<BorrowInterface>>(\r\n    {}\r\n  );\r\n\r\n  const [success, setSuccess] = useState(false);\r\n  const [error, setError] = useState(false);\r\n\r\n  const apiUrl = \"http://localhost:8080\";\r\n  const requestOptions = {\r\n    method: \"GET\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n  };\r\n\r\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setSuccess(false);\r\n    setError(false);\r\n  };\r\n\r\n\r\n  const handleChange = (\r\n    event: React.ChangeEvent<{ name?: string; value: unknown }>\r\n  ) => {\r\n    const name = event.target.name as keyof typeof borrows;\r\n    setBorrow({\r\n      ...borrows,\r\n      [name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const handleDateChange = (date: Date | null) => {\r\n    console.log(date);\r\n    setSelectedDate(date);\r\n  };\r\n  const handleDateChange2 = (date: Date | null) => {\r\n    console.log(date);\r\n    setDue(date);\r\n  };\r\n\r\n\r\n\r\n\r\n  const getMember = async () => {\r\n    fetch(`${apiUrl}/member`, requestOptions)\r\n      .then((response) => response.json())\r\n      .then((res) => {\r\n        if (res.data) {\r\n          setMember(res.data);\r\n        } else {\r\n          console.log(\"else\");\r\n        }\r\n      });\r\n  };\r\n\r\n  const getBook = async () => {\r\n    fetch(`${apiUrl}/book`, requestOptions)\r\n      .then((response) => response.json())\r\n      .then((res) => {\r\n        if (res.data) {\r\n          setBook(res.data);\r\n        } else {\r\n          console.log(\"else\");\r\n        }\r\n      });\r\n  };\r\n\r\n  const getBtype = async () => {\r\n    fetch(`${apiUrl}/btype`, requestOptions)\r\n      .then((response) => response.json())\r\n      .then((res) => {\r\n        if (res.data) {\r\n          setBtype(res.data);\r\n        } else {\r\n          console.log(\"else\");\r\n        }\r\n      });\r\n  };\r\n  \r\n\r\n  \r\n  useEffect(() => {\r\n    getMember();\r\n    getBook();\r\n    getBtype();\r\n  }, []);\r\n\r\n  const convertType = (data: string | number | undefined) => {\r\n    let val = typeof data === \"string\" ? parseInt(data) : data;\r\n    return val;\r\n  };\r\n\r\n\r\n  var date = new Date();\r\n  var pday = 0;\r\n  const handleInputChange = (num: number| null)=>{\r\n    console.log(num);\r\n  }\r\n\r\n  function submit() {\r\n    if(selectedDate != null){\r\n      date.setDate(selectedDate.getDate());\r\n    }\r\n\r\n    let data = {\r\n      MemberID : convertType(borrows.MemberID),\r\n      BookID: convertType(borrows.BookID),\r\n      BtypeID: convertType(borrows.BtypeID),\r\n      Borrow_Date: selectedDate,\r\n      Due_date: due,\r\n    };\r\n\r\n    const requestOptionsPost = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(data),\r\n    };\r\n\r\n    fetch(`${apiUrl}/borrow`, requestOptionsPost)\r\n      .then((response) => response.json())\r\n      .then((res) => {\r\n        if (res.data) {\r\n          setSuccess(true);\r\n        } else {\r\n          setError(true);\r\n        }\r\n      });\r\n  }\r\n\r\n\r\n  return (\r\n    <Container className={classes.container} maxWidth=\"md\">\r\n      <Snackbar open={success} autoHideDuration={6000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"success\">\r\n          บันทึกข้อมูลสำเร็จ\r\n        </Alert>\r\n      </Snackbar>\r\n      <Snackbar open={error} autoHideDuration={6000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"error\">\r\n          บันทึกข้อมูลไม่สำเร็จ\r\n        </Alert>\r\n      </Snackbar>\r\n      <Paper className={classes.paper}>\r\n        <Box display=\"flex\">\r\n          <Box flexGrow={1}>\r\n            <Typography\r\n              component=\"h2\"\r\n              variant=\"h6\"\r\n              color=\"primary\"\r\n              gutterBottom\r\n            >\r\n              บันทึกการยืมหนังสือ\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n        <Divider />\r\n        <Grid container spacing={3} className={classes.root}>\r\n        <Grid item xs={12}>\r\n            <FormControl fullWidth variant=\"outlined\">\r\n              <p>รหัสสมาชิก</p>\r\n              <Select\r\n                native\r\n                value={borrows.MemberID}\r\n                onChange={handleChange}\r\n                inputProps={{\r\n                  name: \"MemberID\",\r\n                }}\r\n              >\r\n                <option aria-label=\"None\" value=\"\">\r\n                  กรุณาระบุรหัสสมาชิก\r\n                </option>\r\n                {members.map((item: MemberInterface) => (\r\n                  <option value={item.ID} key={item.ID}>\r\n                    รหัสสมาชิก {item.ID} E-mail {item.Email}\r\n                  </option>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <FormControl fullWidth variant=\"outlined\">\r\n              <p>รหัสหนังสือ</p>\r\n              <Select\r\n                native\r\n                value={borrows.BookID}\r\n                onChange={handleChange}\r\n                inputProps={{\r\n                  name: \"BookID\",\r\n                }}\r\n              >\r\n                <option aria-label=\"None\" value=\"\">\r\n                  กรุณาระบุรหัสหนังสือ\r\n                </option>\r\n                {books.map((item: BookInterface) => (\r\n                  <option value={item.ID} key={item.ID}>\r\n                    รหัสหนังสือ {item.ID} ชื่อหนังสือ {item.Name}\r\n                  </option>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <FormControl fullWidth variant=\"outlined\">\r\n              <p>ประเภทการยืม</p>\r\n              <Select\r\n                native\r\n                value={borrows.BtypeID}\r\n                onChange={handleChange}\r\n                inputProps={{\r\n                  name: \"BtypeID\",\r\n                }}\r\n              >\r\n                <option aria-label=\"None\" value=\"\">\r\n                  กรุณาประเภทการยืม\r\n                </option>\r\n                {btypes.map((item: BtypeInterface) => (\r\n                  <option value={item.ID} key={item.ID}>\r\n                    รหัส {item.ID} ชื่อประเภทการยืม {item.Name} จำนวนเงินที่ต้องชำระ {item.Price} บาท จำนวนวันที่ยืมได้มากที่สุด {item.Period_Day} วัน\r\n                  </option>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <FormControl fullWidth variant=\"outlined\">\r\n              <p>วันที่และเวลาที่เริ่มต้นยืม</p>\r\n              <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                <KeyboardDateTimePicker\r\n                  name=\"Borrow_Date\"\r\n                  value={selectedDate}\r\n                  onChange={handleDateChange}\r\n                  label=\"กรุณาเลือกวันที่และเวลาเริ่มต้นยืม\"\r\n                  minDate={new Date(\"2018-01-01T00:00\")}\r\n                  format=\"yyyy/MM/dd hh:mm a\"\r\n                />\r\n\r\n              </MuiPickersUtilsProvider>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <FormControl fullWidth variant=\"outlined\">\r\n              <p>วันที่และเวลาที่เริ่มต้นยืม</p>\r\n              <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                <KeyboardDateTimePicker\r\n                  name=\"Due_Date\"\r\n                  value={due}\r\n                  onChange={handleDateChange2}\r\n                  label=\"กรุณาเลือกวันที่และเวลาต้องการคืน\"\r\n                  minDate={new Date(\"2018-01-01T00:00\")}\r\n                  format=\"yyyy/MM/dd hh:mm a\"\r\n                />\r\n\r\n              </MuiPickersUtilsProvider>\r\n            </FormControl>\r\n          </Grid>\r\n          \r\n        \r\n         \r\n          <Grid item xs={12}>\r\n            <Button\r\n              component={RouterLink}\r\n              to=\"/borrow\"\r\n              variant=\"contained\"\r\n            >\r\n              กลับ\r\n            </Button>\r\n            <Button\r\n              style={{ float: \"right\" }}\r\n              variant=\"contained\"\r\n              onClick={submit}\r\n              color=\"primary\"\r\n            >\r\n              บันทึก\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default CreateBorrow;\r\n","c:\\borrow2\\frontend\\src\\components\\Borrow.tsx",["63"],"import { useEffect, useState } from \"react\";\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport { BorrowInterface } from \"../models/IBorrow\";\r\nimport { format } from 'date-fns'\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    container: {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n    table: {\r\n      minWidth: 650,\r\n    },\r\n    tableSpace: {\r\n      marginTop: 20,\r\n    },\r\n  })\r\n);\r\n\r\nfunction Borrow() {\r\n  const classes = useStyles();\r\n  const [Borrow, setBorrow] = useState<BorrowInterface[]>([]);\r\n  const apiUrl = \"http://localhost:8080\";\r\n  const requestOptions = {\r\n    method: \"GET\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n  };\r\n\r\n  const getBorrow = async () => {\r\n    fetch(`${apiUrl}/borrow`, requestOptions)\r\n      .then((response) => response.json())\r\n      .then((res) => {\r\n        console.log(res.data);\r\n        if (res.data) {\r\n          setBorrow(res.data);\r\n        } else {\r\n          console.log(\"else\");\r\n        }\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBorrow();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Container className={classes.container} maxWidth=\"md\">\r\n        <Box display=\"flex\">\r\n          <Box flexGrow={1}>\r\n            <Typography\r\n              component=\"h2\"\r\n              variant=\"h6\"\r\n              color=\"primary\"\r\n              gutterBottom\r\n            >\r\n              ระบบการยืมหนังสือ\r\n            </Typography>\r\n            <Box>\r\n            <Button\r\n              component={RouterLink}\r\n              to=\"/borrow/create\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n            >\r\n              สร้างข้อมูล\r\n            </Button>\r\n          </Box>\r\n          </Box>\r\n        </Box>\r\n        <TableContainer component={Paper} className={classes.tableSpace}>\r\n          <Table className={classes.table} aria-label=\"simple table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell align=\"center\" width=\"8%\">\r\n                  รหัสการยืม\r\n                </TableCell>\r\n                <TableCell align=\"center\" width=\"15%\">\r\n                  Email\r\n                </TableCell>\r\n                <TableCell align=\"center\" width=\"15%\">\r\n                  ประเภทการยืม\r\n                </TableCell>\r\n                <TableCell align=\"center\" width=\"8%\">\r\n                  รหัสหนังสือ\r\n                </TableCell>\r\n                <TableCell align=\"center\" width=\"25%\">\r\n                  วันที่ยืมหนังสือ\r\n                </TableCell>\r\n                <TableCell align=\"center\" width=\"25%\">\r\n                  วันที่ต้องคืนหนังสือ\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {Borrow.map((item: BorrowInterface) => (\r\n                <TableRow key={item.ID}>\r\n                  <TableCell align=\"center\">{item.ID}</TableCell>\r\n                  <TableCell align=\"center\">{item.Member.Email}</TableCell>\r\n                  <TableCell align=\"center\">{item.Btype.Name}</TableCell>\r\n                  <TableCell align=\"center\">{item.Book.ID}</TableCell>\r\n                  <TableCell align=\"center\">{format((new Date(item.Borrow_Date)), 'dd MMMM yyyy hh:mm a')}</TableCell>\r\n                  <TableCell align=\"center\">{format((new Date(item.Due_Date)), 'dd MMMM yyyy hh:mm a')}</TableCell>\r\n                </TableRow>\r\n              ))}\r\n\r\n            </TableBody>\r\n          </Table> \r\n          \r\n        </TableContainer>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Borrow;\r\n","c:\\personnel\\frontend\\src\\index.tsx",[],["64","65"],"c:\\personnel\\frontend\\src\\reportWebVitals.ts",[],"c:\\personnel\\frontend\\src\\App.tsx",[],"c:\\personnel\\frontend\\src\\components\\Home.tsx",[],"c:\\personnel\\frontend\\src\\components\\Personnel.tsx",["66"],"c:\\personnel\\frontend\\src\\components\\CreatePersonnel.tsx",["67","68"],"import { useEffect, useState } from \"react\";\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\nimport {\r\n  makeStyles,\r\n  Theme,\r\n  createStyles,\r\n  alpha,\r\n} from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MuiAlert, { AlertProps } from \"@material-ui/lab/Alert\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { BloodTypeInterface } from \"../models/IBloodtype\";\r\nimport { GenderInterface } from \"../models/IGender\";\r\nimport { JobTitleInterface } from \"../models/IJobtitle\";\r\nimport { PersonnelInterface } from \"../models/IPersonnel\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDateTimePicker,\r\n} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\n\r\nconst Alert = (props: AlertProps) => {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n};\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    container: {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      color: theme.palette.text.secondary,\r\n    },\r\n  })\r\n);\r\n\r\nfunction CreatePersonnel() {\r\n  const classes = useStyles();\r\n  const [selectedDate, setSelectedDate] = useState<Date | null>(new Date());\r\n  const [bloodtype, setBloodType] = useState<BloodTypeInterface[]>([]);\r\n  const [gender, setGender] = useState<GenderInterface []>([]);\r\n  const [jobtitle, setJobTitle] = useState<JobTitleInterface[]>([]);\r\n  const [personnel, setPersonnel] = useState<Partial<PersonnelInterface>>(\r\n    {}\r\n  );\r\n\r\n  const [success, setSuccess] = useState(false);\r\n  const [error, setError] = useState(false);\r\n\r\n  const apiUrl = \"http://localhost:8080\";\r\n  const requestOptions = {\r\n    method: \"GET\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n  };\r\n\r\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setSuccess(false);\r\n    setError(false);\r\n  };\r\n\r\n\r\n  const handleChange = (\r\n    event: React.ChangeEvent<{ name?: string; value: unknown }>\r\n  ) => {\r\n    const name = event.target.name as keyof typeof personnel;\r\n    setPersonnel({\r\n      ...personnel,\r\n      [name]: event.target.value,\r\n    });\r\n  };\r\n  \r\n  const handleInputChangeName = (\r\n    event: React.ChangeEvent<{ id?: string; value: any }>\r\n  ) => {\r\n    const id = event.target.id as keyof typeof personnel;\r\n    const { value } = event.target;\r\n    setPersonnel({ ...personnel, [id]: value });\r\n  };\r\n  const handleInputChangePersonalID = (\r\n    event: React.ChangeEvent<{ id?: string; value: any }>\r\n  ) => {\r\n    const id = event.target.id as keyof typeof personnel;\r\n    const { value } = event.target;\r\n    setPersonnel({ ...personnel, [id]: value });\r\n  };\r\n  const handleInputChangeTel = (\r\n    event: React.ChangeEvent<{ id?: string; value: any }>\r\n  ) => {\r\n    const id = event.target.id as keyof typeof personnel;\r\n    const { value } = event.target;\r\n    setPersonnel({ ...personnel, [id]: value });\r\n  };\r\n  const handleInputChangeAddress = (\r\n    event: React.ChangeEvent<{ id?: string; value: any }>\r\n  ) => {\r\n    const id = event.target.id as keyof typeof personnel;\r\n    const { value } = event.target;\r\n    setPersonnel({ ...personnel, [id]: value });\r\n  };\r\n  const handleInputChangeSalary = (\r\n    event: React.ChangeEvent<{ id?: string; value: any }>\r\n  ) => {\r\n    const id = event.target.id as keyof typeof personnel;\r\n    const { value } = event.target;\r\n    setPersonnel({ ...personnel, [id]: value });\r\n  };\r\n\r\n\r\n  const handleDateChange = (date: Date | null) => {\r\n    console.log(date);\r\n    setSelectedDate(date);\r\n  };\r\n\r\n\r\n\r\n\r\n  const getBloodType = async () => {\r\n    fetch(`${apiUrl}/bloodtype`, requestOptions)\r\n      .then((response) => response.json())\r\n      .then((res) => {\r\n        if (res.data) {\r\n          setBloodType(res.data);\r\n        } else {\r\n          console.log(\"else\");\r\n        }\r\n      });\r\n  };\r\n\r\n  const getGender = async () => {\r\n    fetch(`${apiUrl}/gender`, requestOptions)\r\n      .then((response) => response.json())\r\n      .then((res) => {\r\n        if (res.data) {\r\n          setGender(res.data);\r\n        } else {\r\n          console.log(\"else\");\r\n        }\r\n      });\r\n  };\r\n\r\n  const getJobTitle = async () => {\r\n    fetch(`${apiUrl}/jobtitle`, requestOptions)\r\n      .then((response) => response.json())\r\n      .then((res) => {\r\n        if (res.data) {\r\n          setJobTitle(res.data);\r\n        } else {\r\n          console.log(\"else\");\r\n        }\r\n      });\r\n  };\r\n  \r\n\r\n  \r\n  useEffect(() => {\r\n    getBloodType();\r\n    getGender();\r\n    getJobTitle();\r\n  }, []);\r\n\r\n  const convertType = (data: string | number | undefined) => {\r\n    let val = typeof data === \"string\" ? parseInt(data) : data;\r\n    return val;\r\n  };\r\n\r\n  function submit() {\r\n    \r\n\r\n\r\n    let data = {\r\n        Name:       personnel.Name,\r\n\t    Personalid:  personnel.Personalid,  \r\n\t    BirthDay:    selectedDate,\r\n\t    Tel    :     personnel.Tel,\r\n\t    Address :    personnel.Address,\r\n\t    Salary :     convertType(personnel.Salary),\r\n        GenderID : convertType(personnel.GenderID),\r\n        BloodTypeID: convertType(personnel.BloodTypeID),\r\n        JobTitleID: convertType(personnel.JobTitleID),\r\n    };\r\n\r\n    const requestOptionsPost = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(data),\r\n    };\r\n\r\n    fetch(`${apiUrl}/personnel`, requestOptionsPost)\r\n      .then((response) => response.json())\r\n      .then((res) => {\r\n        if (res.data) {\r\n          setSuccess(true);\r\n        } else {\r\n          setError(true);\r\n        }\r\n      });\r\n  }\r\n\r\n\r\n  return (\r\n    <Container className={classes.container} maxWidth=\"md\">\r\n      <Snackbar open={success} autoHideDuration={6000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"success\">\r\n          บันทึกข้อมูลสำเร็จ\r\n        </Alert>\r\n      </Snackbar>\r\n      <Snackbar open={error} autoHideDuration={6000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"error\">\r\n          บันทึกข้อมูลไม่สำเร็จ\r\n        </Alert>\r\n      </Snackbar>\r\n      <Paper className={classes.paper}>\r\n        <Box display=\"flex\">\r\n          <Box flexGrow={1}>\r\n            <Typography\r\n              component=\"h2\"\r\n              variant=\"h6\"\r\n              color=\"primary\"\r\n              gutterBottom\r\n            >\r\n              บันทึกข้อมูลบุคคลากร\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n        <Divider />\r\n        <Grid container spacing={3} className={classes.root}>\r\n        <Grid item xs={12}>\r\n            <p>ชื่อ</p>\r\n            <FormControl fullWidth variant=\"outlined\">\r\n              <TextField\r\n                id=\"Name\"\r\n                variant =\"outlined\"\r\n                type=\"string\"\r\n                size=\"medium\"\r\n                placeholder=\"กรุณากรอกข้อมูลชื่อ\"\r\n                value={personnel.Name}\r\n                onChange={handleInputChangeName}\r\n              />\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <p>เลขบัตรประจำตัวประชาชน</p>\r\n            <FormControl fullWidth variant=\"outlined\">\r\n              <TextField\r\n                id=\"Personalid\"\r\n                variant =\"outlined\"\r\n                type=\"string\"\r\n                size=\"medium\"\r\n                placeholder=\"กรุณากรอกเลขบัตรประจำตัวประชาชน\"\r\n                value={personnel.Personalid}\r\n                onChange={handleInputChangePersonalID}\r\n              />\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <p>เบอร์โทร</p>\r\n            <FormControl fullWidth variant=\"outlined\">\r\n              <TextField\r\n                id=\"Tel\"\r\n                variant =\"outlined\"\r\n                type=\"string\"\r\n                size=\"medium\"\r\n                placeholder=\"กรุณากรอกข้อมูลเบอร์โทร\"\r\n                value={personnel.Tel}\r\n                onChange={handleInputChangeTel}\r\n              />\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <p>ที่อยู่</p>\r\n            <FormControl fullWidth variant=\"outlined\">\r\n              <TextField\r\n                id=\"Address\"\r\n                variant =\"outlined\"\r\n                type=\"string\"\r\n                size=\"medium\"\r\n                placeholder=\"กรุณากรอกข้อมูลที่อยู่\"\r\n                value={personnel.Address}\r\n                onChange={handleInputChangeAddress}\r\n              />\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <p>เงินเดือน</p>\r\n            <FormControl fullWidth variant=\"outlined\">\r\n              <TextField\r\n                id=\"Salary\"\r\n                variant =\"outlined\"\r\n                type=\"string\"\r\n                size=\"medium\"\r\n                placeholder=\"กรุณากรอกข้อมูลเงินเดือน\"\r\n                value={personnel.Salary}\r\n                onChange={handleInputChangeSalary}\r\n              />\r\n            </FormControl>\r\n          </Grid>\r\n        <Grid item xs={3}>\r\n            <FormControl fullWidth variant=\"outlined\">\r\n              <p>เพศ</p>\r\n              <Select\r\n                native\r\n                value={personnel.GenderID}\r\n                onChange={handleChange}\r\n                inputProps={{\r\n                  name: \"GenderID\",\r\n                }}\r\n              >\r\n                <option aria-label=\"None\" value=\"\">\r\n                  กรุณาระบุเพศ\r\n                </option>\r\n                {gender.map((item: GenderInterface) => (\r\n                  <option value={item.ID} key={item.ID}>\r\n                    {item.Genders}\r\n                  </option>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <FormControl fullWidth variant=\"outlined\">\r\n              <p>กรุ๊ปเลือด</p>\r\n              <Select\r\n                native\r\n                value={personnel.BloodTypeID}\r\n                onChange={handleChange}\r\n                inputProps={{\r\n                  name: \"BloodTypeID\",\r\n                }}\r\n              >\r\n                <option aria-label=\"None\" value=\"\">\r\n                  กรุณาระบุกรุ๊ปเลือด\r\n                </option>\r\n                {bloodtype.map((item: BloodTypeInterface) => (\r\n                  <option value={item.ID} key={item.ID}>\r\n                    {item.BloodType}\r\n                  </option>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <FormControl fullWidth variant=\"outlined\">\r\n              <p>อาชีพ</p>\r\n              <Select\r\n                native\r\n                value={personnel.JobTitleID}\r\n                onChange={handleChange}\r\n                inputProps={{\r\n                  name: \"JobTitleID\",\r\n                }}\r\n              >\r\n                <option aria-label=\"None\" value=\"\">\r\n                  กรุณาระบุอาชีพ\r\n                </option>\r\n                {jobtitle.map((item: JobTitleInterface) => (\r\n                  <option value={item.ID} key={item.ID}>\r\n                    {item.Job}\r\n                  </option>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <FormControl fullWidth variant=\"outlined\">\r\n              <p>วันเกิด</p>\r\n              <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                <KeyboardDateTimePicker\r\n                  name=\"BirthDay\"\r\n                  value={selectedDate}\r\n                  onChange={handleDateChange}\r\n                  label=\"กรุณาเลือกวันเกิด\"\r\n                  minDate={new Date(\"1900-01-01T00:00\")}\r\n                  format=\"yyyy/MM/dd hh:mm a\"\r\n                />\r\n\r\n              </MuiPickersUtilsProvider>\r\n            </FormControl>\r\n          </Grid>\r\n          \r\n        \r\n         \r\n          <Grid item xs={12}>\r\n            <Button\r\n              component={RouterLink}\r\n              to=\"/personnel\"\r\n              variant=\"contained\"\r\n            >\r\n              กลับ\r\n            </Button>\r\n            <Button\r\n              style={{ float: \"right\" }}\r\n              variant=\"contained\"\r\n              onClick={submit}\r\n              color=\"primary\"\r\n            >\r\n              บันทึก\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default CreatePersonnel;\r\n",{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":7,"column":3,"nodeType":"75","messageId":"76","endLine":7,"endColumn":8},{"ruleId":"73","severity":1,"message":"77","line":20,"column":8,"nodeType":"75","messageId":"76","endLine":20,"endColumn":17},{"ruleId":"78","severity":1,"message":"79","line":143,"column":6,"nodeType":"80","endLine":143,"endColumn":8,"suggestions":"81"},{"ruleId":"73","severity":1,"message":"82","line":152,"column":7,"nodeType":"75","messageId":"76","endLine":152,"endColumn":11},{"ruleId":"73","severity":1,"message":"83","line":153,"column":9,"nodeType":"75","messageId":"76","endLine":153,"endColumn":26},{"ruleId":"78","severity":1,"message":"84","line":57,"column":6,"nodeType":"80","endLine":57,"endColumn":8,"suggestions":"85"},{"ruleId":"69","replacedBy":"86"},{"ruleId":"71","replacedBy":"87"},{"ruleId":"78","severity":1,"message":"88","line":57,"column":6,"nodeType":"80","endLine":57,"endColumn":8,"suggestions":"89"},{"ruleId":"73","severity":1,"message":"74","line":7,"column":3,"nodeType":"75","messageId":"76","endLine":7,"endColumn":8},{"ruleId":"78","severity":1,"message":"90","line":175,"column":6,"nodeType":"80","endLine":175,"endColumn":8,"suggestions":"91"},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"@typescript-eslint/no-unused-vars","'alpha' is defined but never used.","Identifier","unusedVar","'TextField' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getBook', 'getBtype', and 'getMember'. Either include them or remove the dependency array.","ArrayExpression",["94"],"'pday' is assigned a value but never used.","'handleInputChange' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getBorrow'. Either include it or remove the dependency array.",["95"],["92"],["93"],"React Hook useEffect has a missing dependency: 'getPersonnel'. Either include it or remove the dependency array.",["96"],"React Hook useEffect has missing dependencies: 'getBloodType', 'getGender', and 'getJobTitle'. Either include them or remove the dependency array.",["97"],"no-global-assign","no-unsafe-negation",{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},{"desc":"102","fix":"103"},{"desc":"104","fix":"105"},"Update the dependencies array to be: [getBook, getBtype, getMember]",{"range":"106","text":"107"},"Update the dependencies array to be: [getBorrow]",{"range":"108","text":"109"},"Update the dependencies array to be: [getPersonnel]",{"range":"110","text":"111"},"Update the dependencies array to be: [getBloodType, getGender, getJobTitle]",{"range":"112","text":"113"},[3881,3883],"[getBook, getBtype, getMember]",[1708,1710],"[getBorrow]",[1738,1740],"[getPersonnel]",[5108,5110],"[getBloodType, getGender, getJobTitle]"]